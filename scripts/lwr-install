#!/bin/bash

# скрипт подготовит 
# целевой раздел, если это необходимо, создаст его на диске, а так же своп-раздел
# примонтирует этот раздел и скопирует на него файловую систему
# после этого установит grub

# [ОБЯЗАТЕЛЬНОЕ] путь до файла с архивом файловой системы squashfs (формат, поддерживаемый mount), которую будем копировать на диск
SQUASH_SRC=/cdrom/casper/filesystem.squashfs
# [ОБЯЗАТЕЛЬНОЕ] путь, в который будет смонтирован архив для последующего копирования
SQUASH_MOUNT=/tmp/squashfs

# [ОБЯЗАТЕЛЬНОЕ] раздел, для установки grub загрузчика (может быть отличным от целевого диска с корнем файловой системы)
TARGET_GRUB_DEVICE=/dev/sda
# !!!ВНИМАНИЕ при установке этого значения все данные на этом разделе будут уничтожены!!! раздел, на котором будут созданы разделы целевой файловой системы и swap
TARGET_ROOT_DISK_DESTROY=
# только при не пустом значении TARGET_ROOT_DISK_DESTROY, тип разметки диска msdos/gpt/...
TARGET_ROOT_DISK_MBR=msdos
# только при не пустом значении TARGET_ROOT_DISK_DESTROY, если значение не пустое то при создании разметки будет создан раздел swap указанного размера
SWAP_PARTITION_SIZE=4096m
# только при не пустом значении TARGET_ROOT_DISK_DESTROY, тип файловой целевой системы
TARGET_FS=ext4
# только при пустом значении TARGET_ROOT_DISK_DESTROY, определяет утсройство для файловой системы ROOT (возможно использование UUID=xxx)
TARGET_ROOT_DEV=/dev/sda1
# только при пустом значении TARGET_ROOT_DISK_DESTROY, определяет устройство для файла-подкачки (возможно использование UUID=xxx)
TARGET_SWAP_DEV=

# [ОБЯЗАТЕЛЬНОЕ] каталог, в который монтируется целевой раздел
TARGET_MOUNT=/tmp/target

LOG=/var/log/qinst.log

# заменяем значения настроек из командной строки в том же формате NAME=VAL
for i in "$@"
do
  IFS="=";declare -a Array=($1) 
  declare -A "${Array[0]}"="${Array[1]}"
  shift
done

# функция для вывода сообщений одновременно в лог файл и на экран
function print() {
	printf "$*"
	echo $* >>$LOG 2>&1
}

##################################################################################################################################

if [[ ! -z $TARGET_ROOT_DISK_DESTROY ]]; then
# задана команда уничтожения раздела и пересоздания диска
	# уничтожаем таблицу разделов на диске, заполнив первый сектор нулями
	print "Cleanup entire target disk "
	STATUS=$(dd bs=512 count=1 if=/dev/zero of=$TARGET_ROOT_DISK_DESTROY >>$LOG 2>&1)
	if [[ ! "$STATUS" -eq "0" ]]; then echo ERROR;exit 1;else printf ".";fi
	STATUS=$(partx $TARGET_ROOT_DISK_DESTROY >>$LOG 2>&1)
	if [[ ! "$STATUS" -eq "0" ]]; then echo ERROR;exit 1;else printf ".";fi
	echo ok
	# создаем размету диска, именно тут уничтожаются все данные на диске
	print "Write MBR to target disk disk "
	STATUS=$(parted -s $TARGET_ROOT_DISK_DESTROY mklabel $TARGET_ROOT_DISK_MBR >>$LOG 2>&1)
	if [[ ! "$STATUS" -eq "0" ]]; then echo ERROR;exit 1;else printf ".";fi
	echo ok
	# размечаем разделы
	if [[ -z $SWAP_PARTITION_SIZE ]]; then
	# без раздела подкачки
		print "Make single root partition entire disk "
		STATUS=$(parted -s $TARGET_ROOT_DISK_DESTROY mkpart primary ext2 2048s 100% >>$LOG 2>&1)
		if [[ ! "$STATUS" -eq "0" ]]; then echo ERROR;exit 1;else printf ".";fi
		# инициализируем переменные разделов (для свопа позже)
		TARGET_ROOT_DEV=$TARGET_GRUB_DEVICE"1"
		TARGET_SWAP_DEV=
	else
	# с разделом подкачки
		print "Make swap and root partitions entire disk "
		STATUS=$(parted -s $TARGET_ROOT_DISK_DESTROY mkpart primary linux-swap 2048s $SWAP_PARTITION_SIZE >>$LOG 2>&1)
		if [[ ! "$STATUS" -eq "0" ]]; then echo ERROR;exit 1;else printf ".";fi
		STATUS=$(parted -s $TARGET_ROOT_DISK_DESTROY mkpart primary ext2 $SWAP_PARTITION_SIZE 100% >>$LOG 2>&1)
		if [[ ! "$STATUS" -eq "0" ]]; then echo ERROR;exit 1;else printf ".";fi
		# инициализируем переменные разделов (для свопа позже)
		TARGET_ROOT_DEV=$TARGET_GRUB_DEVICE"2"
		TARGET_SWAP_DEV=$TARGET_GRUB_DEVICE"1"
		# форматируем раздел подкачки
		STATUS=$(mkswap $TARGET_SWAP_DEV >>$LOG 2>&1)
		if [[ ! "$STATUS" -eq "0" ]]; then echo ERROR;exit 1;else printf ".";fi
	fi
	# форматируем раздел, игнорируем любые предупреждения
	STATUS=$(mkfs.$TARGET_FS -F -F $TARGET_ROOT_DEV >>$LOG 2>&1)
	if [[ ! "$STATUS" -eq "0" ]]; then echo ERROR;exit 1;else printf ".";fi
	echo ok
fi

# монтируем целевой раздел
print "Mount work partitions "
STATUS=$(mkdir $TARGET_MOUNT >>$LOG 2>&1)
if [[ ! "$STATUS" -eq "0" ]]; then echo ERROR;exit 1;else printf ".";fi
STATUS=$(mount $TARGET_ROOT_DEV $TARGET_MOUNT >>$LOG 2>&1)
if [[ ! "$STATUS" -eq "0" ]]; then echo ERROR;exit 1;else printf ".";fi
# монтируем архив-источник корневой системы
STATUS=$(mkdir $SQUASH_MOUNT >>$LOG 2>&1)
if [[ ! "$STATUS" -eq "0" ]]; then echo ERROR;exit 1;else printf ".";fi
STATUS=$(mount $SQUASH_SRC $SQUASH_MOUNT >>$LOG 2>&1)
if [[ ! "$STATUS" -eq "0" ]]; then echo ERROR;exit 1;else printf ".";fi
echo ok
print "Extract root filesystem archive to target "
# копируем файловую систему
STATUS=$(cp -afd $SQUASH_MOUNT/* $TARGET_MOUNT/ >>$LOG 2>&1)
if [[ ! "$STATUS" -eq "0" ]]; then echo ERROR;exit 1;else printf ".";fi
echo ok
# устанавливаем grub
print "Instal grub "
STATUS=$(grub-install --root-directory=$TARGET_MOUNT $TARGET_GRUB_DEVICE >>$LOG 2>&1)
if [[ ! "$STATUS" -eq "0" ]]; then echo ERROR;exit 1;else printf ".";fi
# подготавливаемся к chroot, монтируем dev/proc/sys
for a in dev sys proc;do mount --bind /$a $TARGET_MOUNT/$a >>$LOG 2>&1;done;
STATUS=$(chroot $TARGET_MOUNT grub-mkconfig -o /boot/grub/grub.cfg >>$LOG 2>&1)
if [[ ! "$STATUS" -eq "0" ]]; then echo ERROR;exit 1;else printf ".";fi
# размонтируем dev/proc/sys
umount $TARGET_MOUNT{/dev,/sys/,/proc} >>$LOG 2>&1
echo ok
# дополняем fstab
print "Finalise "
echo $TARGET_ROOT_DEV / ext4 noatime,errors=remount-ro 0 1 >> $TARGET_MOUNT/etc/fstab
if [[ ! -z $TARGET_SWAP_DEV ]]; then
	echo $TARGET_SWAP_DEV none swap defaults 0 0 >> $TARGET_MOUNT/etc/fstab
fi
# размонтируем разделы
STATUS=$(umount $TARGET_MOUNT $SQUASH_MOUNT >>$LOG 2>&1)
if [[ ! "$STATUS" -eq "0" ]]; then echo ERROR;exit 1;else printf ".";fi
# завершение, сброс кешей записи на диск
sync
echo ok
